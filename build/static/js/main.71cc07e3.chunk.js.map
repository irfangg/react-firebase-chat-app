{"version":3,"sources":["App.js","firebase.js","User.js","Chat.js","registerServiceWorker.js","index.js"],"names":["App","react_default","a","createElement","this","props","children","Component","firebase","apiKey","authDomain","databaseURL","storageBucket","database","User","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","users","username","_this2","ref","orderByKey","limitToLast","once","snapshot","val","setState","e","target","value","preventDefault","push","localStorage","setItem","history","className","id","type","onChange","onNameChange","bind","onClick","onAddClick","Chat","messages","onAddMessage","assertThisInitialized","getItem","on","messagesObj","keys","forEach","key","map","message","text","user","console","log","prevState","event","input","_this3","_class","node","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","HashRouter","Route","exact","path","component","name","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71cc07e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default App;","import * as firebase from 'firebase';\n\nconst config = {\n  apiKey: 'AIzaSyBB87nq-WStrxyPZh73VvoKWwihVjveAFs',\n  authDomain: 'chat-room-2a07e.firebaseapp.com',\n  databaseURL: 'https://chat-room-2a07e.firebaseio.com',\n  storageBucket: 'chat-room-2a07e.appspot.com'\n};\n\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\n\nexport {\n  database,\n};","import React, { Component } from 'react';\nimport { database } from './firebase';\n\nexport default class User extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      users: [],\n      username: ''\n    };\n  }\n\n  componentWillMount() {\n    const userRef = database.ref('users')\n      .orderByKey()\n      .limitToLast(100);\n\n    userRef.once('value', snapshot => {\n      const users = [snapshot.val()];\n      this.setState({users: users});\n    });\n  }\n\n  onNameChange(e) {\n    this.setState({username: e.target.value})\n  }\n\n  onAddClick(e) {\n    e.preventDefault();\n    database.ref('users').push({username: this.state.username});\n    localStorage.setItem('chat_username', this.state.username);\n    this.props.history.push('/chat');\n  }\n\n  render() {\n    return(\n    <div className=\"form-group col-md-4\">\n        <label >Username: </label>\n        <input className=\"form-control input-sm\" id=\"inputsm\" type=\"text\" onChange={this.onNameChange.bind(this)}/>\n        <button className=\"btn btn-info\" onClick={this.onAddClick.bind(this)}>Add</button>\n    </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { database } from './firebase';\n\nexport default class Chat extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      messages: [],\n      username: ''\n    };\n\n    this.onAddMessage = this.onAddMessage.bind(this);\n  }\n\n  componentWillMount() {\n    const username = localStorage.getItem('chat_username');\n    this.setState({username: username ? username : 'Unknown'})\n    const messagesRef = database.ref('messages')\n      .orderByKey()\n      .limitToLast(100);\n\n    messagesRef.on('value', snapshot => {\n//    console.log(...snapshot.val())\n//      const message = { ...snapshot.val(), id: snapshot.key };\n      let messagesObj = snapshot.val();\n      let messages = [];\n      Object.keys(messagesObj).forEach(key => messages.push(messagesObj[key]));\n      messages = messages.map((message) => { return {text: message.text, user: message.user, id: message.key}})\n//      messages.reverse();\n      console.log(messages)\n      this.setState(prevState => ({\n        messages: messages,\n      }));\n    });\n  }\n\n  onAddMessage(event) {\n    event.preventDefault();\n\n    database.ref('messages').push({text: this.input.value, user: this.state.username});\n\n    this.input.value = '';\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"padding-13 messages-div\">\n            <h2>Chat Messages</h2>\n\n            {this.state.messages.map((message) => {\n             const _class = message.user === this.state.username ? 'message-left container' : 'message-right container';\n            return (\n                <div className={_class}>\n                  <h6 className=\"name-heading\">{message.user}</h6>\n                  <p className=\"marg-left-10\">{message.text}</p>\n                  <span className=\"time-left\">11:05</span>\n                </div>\n            )\n            })}\n        </div>\n\n      <div className=\"container textarea-div\">\n        <textarea className=\"text-area\" ref={node => this.input = node}></textarea>\n        <button className=\"btn btn-info send-btn \" onClick={this.onAddMessage}>Send</button>\n      </div>\n    </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport User from './User';\nimport Chat from './Chat';\nimport registerServiceWorker from './registerServiceWorker';\n//import { Router, Route, Link, hashHistory } from \"react-router\";\nimport { HashRouter, Route } from 'react-router-dom'\n\nReactDOM.render(\n<HashRouter>\n<div>\n    <Route exact path=\"/\" component={App}></Route>\n    <Route exact path=\"/\" component={User}></Route>\n    <Route exact path=\"/chat\" name=\"chat\" component={Chat}></Route></div>\n</HashRouter>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}